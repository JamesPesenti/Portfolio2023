{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nexport function getRouteInfoFromState(getPathFromState, state) {\n  var _getPathFromState = getPathFromState(state, false),\n    path = _getPathFromState.path;\n  var qualified = getPathFromState(state, true);\n  return _objectSpread({\n    unstable_globalHref: path,\n    pathname: path.split(\"?\")[\"0\"]\n  }, getNormalizedStatePath(qualified));\n}\nexport function getNormalizedStatePath(_ref) {\n  var statePath = _ref.path,\n    params = _ref.params;\n  var _statePath$split = statePath.split(\"?\"),\n    _statePath$split2 = _slicedToArray(_statePath$split, 1),\n    pathname = _statePath$split2[0];\n  return {\n    segments: pathname.split(\"/\").filter(Boolean).map(decodeURIComponent),\n    params: Object.entries(params).reduce(function (prev, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n      if (Array.isArray(value)) {\n        prev[key] = value.map(decodeURIComponent);\n      } else {\n        prev[key] = decodeURIComponent(value);\n      }\n      return prev;\n    }, {})\n  };\n}","map":{"version":3,"names":["getRouteInfoFromState","getPathFromState","state","path","qualified","unstable_globalHref","pathname","split","getNormalizedStatePath","statePath","params","segments","filter","Boolean","map","decodeURIComponent","Object","entries","reduce","prev","key","value","Array","isArray"],"sources":["C:/Users/jimpe/Desktop/react_native_apps/Portfolio2023/node_modules/expo-router/src/LocationProvider.tsx"],"sourcesContent":["import { State } from \"./fork/getPathFromState\";\n\ntype SearchParams = Record<string, string | string[]>;\n\nexport type UrlObject = {\n  unstable_globalHref: string;\n  pathname: string;\n  readonly params: SearchParams;\n  segments: string[];\n};\n\nexport function getRouteInfoFromState(\n  getPathFromState: (\n    state: State,\n    asPath: boolean\n  ) => { path: string; params: any },\n  state: State\n): UrlObject {\n  const { path } = getPathFromState(state, false);\n  const qualified = getPathFromState(state, true);\n  return {\n    // TODO: This may have a predefined origin attached in the future.\n    unstable_globalHref: path,\n    pathname: path.split(\"?\")[\"0\"],\n    ...getNormalizedStatePath(qualified),\n  };\n}\n\n// TODO: Split up getPathFromState to return all this info at once.\nexport function getNormalizedStatePath({\n  path: statePath,\n  params,\n}: {\n  path: string;\n  params: any;\n}): Pick<UrlObject, \"segments\" | \"params\"> {\n  const [pathname] = statePath.split(\"?\");\n  return {\n    // Strip empty path at the start\n    segments: pathname.split(\"/\").filter(Boolean).map(decodeURIComponent),\n    // TODO: This is not efficient, we should generate based on the state instead\n    // of converting to string then back to object\n    params: Object.entries(params).reduce((prev, [key, value]) => {\n      if (Array.isArray(value)) {\n        prev[key] = value.map(decodeURIComponent);\n      } else {\n        prev[key] = decodeURIComponent(value as string);\n      }\n      return prev;\n    }, {} as SearchParams),\n  };\n}\n"],"mappings":";;;;AAWA,OAAO,SAASA,qBAAqB,CACnCC,gBAGkC,EAClCC,KAAY,EACD;EACX,wBAAiBD,gBAAgB,CAACC,KAAK,EAAE,KAAK,CAAC;IAAvCC,IAAI,qBAAJA,IAAI;EACZ,IAAMC,SAAS,GAAGH,gBAAgB,CAACC,KAAK,EAAE,IAAI,CAAC;EAC/C;IAEEG,mBAAmB,EAAEF,IAAI;IACzBG,QAAQ,EAAEH,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG;EAAC,GAC3BC,sBAAsB,CAACJ,SAAS,CAAC;AAExC;AAGA,OAAO,SAASI,sBAAsB,OAMK;EAAA,IALnCC,SAAS,QAAfN,IAAI;IACJO,MAAM,QAANA,MAAM;EAKN,uBAAmBD,SAAS,CAACF,KAAK,CAAC,GAAG,CAAC;IAAA;IAAhCD,QAAQ;EACf,OAAO;IAELK,QAAQ,EAAEL,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAACK,MAAM,CAACC,OAAO,CAAC,CAACC,GAAG,CAACC,kBAAkB,CAAC;IAGrEL,MAAM,EAAEM,MAAM,CAACC,OAAO,CAACP,MAAM,CAAC,CAACQ,MAAM,CAAC,UAACC,IAAI,SAAmB;MAAA;QAAhBC,GAAG;QAAEC,KAAK;MACtD,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;QACxBF,IAAI,CAACC,GAAG,CAAC,GAAGC,KAAK,CAACP,GAAG,CAACC,kBAAkB,CAAC;MAC3C,CAAC,MAAM;QACLI,IAAI,CAACC,GAAG,CAAC,GAAGL,kBAAkB,CAACM,KAAK,CAAW;MACjD;MACA,OAAOF,IAAI;IACb,CAAC,EAAE,CAAC,CAAC;EACP,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}