{"ast":null,"code":"import { NavigationRouteContext } from \"@react-navigation/native\";\nimport React from \"react\";\nimport { store, useStoreRootState, useStoreRouteInfo } from \"./global-state/router-store\";\nexport function useRootNavigationState() {\n  return useStoreRootState();\n}\nexport function useRouteInfo() {\n  return useStoreRouteInfo();\n}\nexport function useRootNavigation() {\n  return store.navigationRef.current;\n}\nexport function useLink() {\n  console.warn(\"`useLink()` is deprecated in favor of `useRouter()`\");\n  return useRouter();\n}\nexport function useRouter() {\n  return {\n    push: store.push,\n    back: store.goBack,\n    replace: store.replace,\n    setParams: store.setParams\n  };\n}\nexport function useUnstableGlobalHref() {\n  return useStoreRouteInfo().unstable_globalHref;\n}\nexport function useSegments() {\n  return useStoreRouteInfo().segments;\n}\nexport function usePathname() {\n  return useStoreRouteInfo().pathname;\n}\nexport function useGlobalSearchParams() {\n  return useStoreRouteInfo().params;\n}\nexport function useSearchParams() {\n  return useGlobalSearchParams();\n}\nexport function useLocalSearchParams() {\n  var _useOptionalLocalRout, _useOptionalLocalRout2;\n  return (_useOptionalLocalRout = (_useOptionalLocalRout2 = useOptionalLocalRoute()) == null ? void 0 : _useOptionalLocalRout2.params) != null ? _useOptionalLocalRout : {};\n}\nfunction useOptionalLocalRoute() {\n  var route = React.useContext(NavigationRouteContext);\n  return route;\n}","map":{"version":3,"names":["NavigationRouteContext","React","store","useStoreRootState","useStoreRouteInfo","useRootNavigationState","useRouteInfo","useRootNavigation","navigationRef","current","useLink","console","warn","useRouter","push","back","goBack","replace","setParams","useUnstableGlobalHref","unstable_globalHref","useSegments","segments","usePathname","pathname","useGlobalSearchParams","params","useSearchParams","useLocalSearchParams","useOptionalLocalRoute","route","useContext"],"sources":["C:/Users/jimpe/Desktop/react_native_apps/Portfolio2023/node_modules/expo-router/src/hooks.ts"],"sourcesContent":["import {\n  NavigationRouteContext,\n  ParamListBase,\n  RouteProp,\n} from \"@react-navigation/native\";\nimport React from \"react\";\n\nimport {\n  store,\n  useStoreRootState,\n  useStoreRouteInfo,\n} from \"./global-state/router-store\";\nimport { Router } from \"./types\";\n\ntype SearchParams = Record<string, string | string[]>;\n\nexport function useRootNavigationState() {\n  return useStoreRootState();\n}\n\nexport function useRouteInfo() {\n  return useStoreRouteInfo();\n}\n\nexport function useRootNavigation() {\n  return store.navigationRef.current;\n}\n\n// Wraps useLinkTo to provide an API which is similar to the Link component.\nexport function useLink() {\n  console.warn(\"`useLink()` is deprecated in favor of `useRouter()`\");\n  return useRouter();\n}\n\nexport function useRouter(): Router {\n  return {\n    push: store.push,\n    back: store.goBack,\n    replace: store.replace,\n    setParams: store.setParams,\n    // TODO(EvanBacon): add `reload`\n    // TODO(EvanBacon): add `canGoBack` but maybe more like a `hasContext`\n  };\n}\n\n/**\n * @private\n * @returns the current global pathname with query params attached. This may change in the future to include the hostname from a predefined universal link, i.e. `/foobar?hey=world` becomes `https://acme.dev/foobar?hey=world`\n */\nexport function useUnstableGlobalHref(): string {\n  return useStoreRouteInfo().unstable_globalHref;\n}\n\n/**\n * Get a list of selected file segments for the currently selected route. Segments are not normalized, so they will be the same as the file path. e.g. /[id]?id=normal -> [\"[id]\"]\n *\n * `useSegments` can be typed using an abstract.\n * Consider the following file structure, and strictly typed `useSegments` function:\n *\n * ```md\n * - app\n *   - [user]\n *     - index.js\n *     - followers.js\n *   - settings.js\n * ```\n * This can be strictly typed using the following abstract:\n *\n * ```ts\n * const [first, second] = useSegments<['settings'] | ['[user]'] | ['[user]', 'followers']>()\n * ```\n */\nexport function useSegments<\n  TSegments extends string[] = string[]\n>(): TSegments {\n  return useStoreRouteInfo().segments as TSegments;\n}\n\n/** @returns global selected pathname without query parameters. */\nexport function usePathname(): string {\n  return useStoreRouteInfo().pathname;\n}\n\n/**\n * Get the globally selected query parameters, including dynamic path segments. This function will update even when the route is not focused.\n * Useful for analytics or other background operations that don't draw to the screen.\n *\n * When querying search params in a stack, opt-towards using `useLocalSearchParams` as these will only\n * update when the route is focused.\n *\n * @see `useLocalSearchParams`\n */\nexport function useGlobalSearchParams<\n  TParams extends SearchParams = SearchParams\n>(): Partial<TParams> {\n  return useStoreRouteInfo().params as Partial<TParams>;\n}\n\n/** @deprecated renamed to `useGlobalSearchParams` */\nexport function useSearchParams<\n  TParams extends SearchParams = SearchParams\n>(): Partial<TParams> {\n  return useGlobalSearchParams<TParams>();\n}\n\n/**\n * Returns the URL search parameters for the contextually focused route. e.g. `/acme?foo=bar` -> `{ foo: \"bar\" }`.\n * This is useful for stacks where you may push a new screen that changes the query parameters.\n *\n * To observe updates even when the invoking route is not focused, use `useGlobalSearchParams()`.\n */\nexport function useLocalSearchParams<\n  TParams extends SearchParams = SearchParams\n>(): Partial<TParams> {\n  return (useOptionalLocalRoute()?.params ?? ({} as any)) as Partial<TParams>;\n}\n\nfunction useOptionalLocalRoute<T extends RouteProp<ParamListBase>>():\n  | T\n  | undefined {\n  const route = React.useContext(NavigationRouteContext);\n  return route as T | undefined;\n}\n"],"mappings":"AAAA,SACEA,sBAAsB,QAGjB,0BAA0B;AACjC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SACEC,KAAK,EACLC,iBAAiB,EACjBC,iBAAiB;AAMnB,OAAO,SAASC,sBAAsB,GAAG;EACvC,OAAOF,iBAAiB,EAAE;AAC5B;AAEA,OAAO,SAASG,YAAY,GAAG;EAC7B,OAAOF,iBAAiB,EAAE;AAC5B;AAEA,OAAO,SAASG,iBAAiB,GAAG;EAClC,OAAOL,KAAK,CAACM,aAAa,CAACC,OAAO;AACpC;AAGA,OAAO,SAASC,OAAO,GAAG;EACxBC,OAAO,CAACC,IAAI,CAAC,qDAAqD,CAAC;EACnE,OAAOC,SAAS,EAAE;AACpB;AAEA,OAAO,SAASA,SAAS,GAAW;EAClC,OAAO;IACLC,IAAI,EAAEZ,KAAK,CAACY,IAAI;IAChBC,IAAI,EAAEb,KAAK,CAACc,MAAM;IAClBC,OAAO,EAAEf,KAAK,CAACe,OAAO;IACtBC,SAAS,EAAEhB,KAAK,CAACgB;EAGnB,CAAC;AACH;AAMA,OAAO,SAASC,qBAAqB,GAAW;EAC9C,OAAOf,iBAAiB,EAAE,CAACgB,mBAAmB;AAChD;AAqBA,OAAO,SAASC,WAAW,GAEZ;EACb,OAAOjB,iBAAiB,EAAE,CAACkB,QAAQ;AACrC;AAGA,OAAO,SAASC,WAAW,GAAW;EACpC,OAAOnB,iBAAiB,EAAE,CAACoB,QAAQ;AACrC;AAWA,OAAO,SAASC,qBAAqB,GAEf;EACpB,OAAOrB,iBAAiB,EAAE,CAACsB,MAAM;AACnC;AAGA,OAAO,SAASC,eAAe,GAET;EACpB,OAAOF,qBAAqB,EAAW;AACzC;AAQA,OAAO,SAASG,oBAAoB,GAEd;EAAA;EACpB,0DAAQC,qBAAqB,EAAE,qBAAvB,uBAAyBH,MAAM,oCAAK,CAAC,CAAC;AAChD;AAEA,SAASG,qBAAqB,GAEhB;EACZ,IAAMC,KAAK,GAAG7B,KAAK,CAAC8B,UAAU,CAAC/B,sBAAsB,CAAC;EACtD,OAAO8B,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}