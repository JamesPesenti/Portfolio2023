{"ast":null,"code":"\"use strict\";\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogBoxLog = void 0;\nvar LogBoxSymbolication = __importStar(require(\"./LogBoxSymbolication\"));\nfunction componentStackToStack(componentStack) {\n  return componentStack.map(function (stack) {\n    var _a, _b, _c, _d;\n    return {\n      file: stack.fileName,\n      methodName: stack.content,\n      lineNumber: (_b = (_a = stack.location) === null || _a === void 0 ? void 0 : _a.row) !== null && _b !== void 0 ? _b : 0,\n      column: (_d = (_c = stack.location) === null || _c === void 0 ? void 0 : _c.column) !== null && _d !== void 0 ? _d : 0,\n      arguments: []\n    };\n  });\n}\nvar LogBoxLog = function () {\n  function LogBoxLog(data) {\n    _classCallCheck(this, LogBoxLog);\n    var _a, _b;\n    this.symbolicated = {\n      stack: {\n        error: null,\n        stack: null,\n        status: \"NONE\"\n      },\n      component: {\n        error: null,\n        stack: null,\n        status: \"NONE\"\n      }\n    };\n    this.callbacks = new Map();\n    this.componentStackCache = null;\n    this.level = data.level;\n    this.type = (_a = data.type) !== null && _a !== void 0 ? _a : \"error\";\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n    this.symbolicated = (_b = data.symbolicated) !== null && _b !== void 0 ? _b : this.symbolicated;\n  }\n  _createClass(LogBoxLog, [{\n    key: \"incrementCount\",\n    value: function incrementCount() {\n      this.count += 1;\n    }\n  }, {\n    key: \"getAvailableStack\",\n    value: function getAvailableStack(type) {\n      if (this.symbolicated[type].status === \"COMPLETE\") {\n        return this.symbolicated[type].stack;\n      }\n      return this.getStack(type);\n    }\n  }, {\n    key: \"flushCallbacks\",\n    value: function flushCallbacks(type) {\n      var callbacks = this.callbacks.get(type);\n      var status = this.symbolicated[type].status;\n      if (callbacks) {\n        for (var callback of callbacks) {\n          callback(status);\n        }\n        callbacks.clear();\n      }\n    }\n  }, {\n    key: \"pushCallback\",\n    value: function pushCallback(type, callback) {\n      var callbacks = this.callbacks.get(type);\n      if (!callbacks) {\n        callbacks = new Set();\n        this.callbacks.set(type, callbacks);\n      }\n      callbacks.add(callback);\n    }\n  }, {\n    key: \"retrySymbolicate\",\n    value: function retrySymbolicate(type, callback) {\n      this._symbolicate(type, true, callback);\n    }\n  }, {\n    key: \"symbolicate\",\n    value: function symbolicate(type, callback) {\n      this._symbolicate(type, false, callback);\n    }\n  }, {\n    key: \"_symbolicate\",\n    value: function _symbolicate(type, retry, callback) {\n      if (callback) {\n        this.pushCallback(type, callback);\n      }\n      var status = this.symbolicated[type].status;\n      if (status === \"COMPLETE\") {\n        return this.flushCallbacks(type);\n      }\n      if (retry) {\n        LogBoxSymbolication.deleteStack(this.getStack(type));\n        this.handleSymbolicate(type);\n      } else {\n        if (status === \"NONE\") {\n          this.handleSymbolicate(type);\n        }\n      }\n    }\n  }, {\n    key: \"getStack\",\n    value: function getStack(type) {\n      if (type === \"component\") {\n        if (this.componentStackCache == null) {\n          this.componentStackCache = componentStackToStack(this.componentStack);\n        }\n        return this.componentStackCache;\n      }\n      return this.stack;\n    }\n  }, {\n    key: \"handleSymbolicate\",\n    value: function handleSymbolicate(type) {\n      var _this = this;\n      var _a;\n      if (type === \"component\" && !((_a = this.componentStack) === null || _a === void 0 ? void 0 : _a.length)) {\n        return;\n      }\n      if (this.symbolicated[type].status !== \"PENDING\") {\n        this.updateStatus(type, null, null, null);\n        LogBoxSymbolication.symbolicate(this.getStack(type)).then(function (data) {\n          _this.updateStatus(type, null, data === null || data === void 0 ? void 0 : data.stack, data === null || data === void 0 ? void 0 : data.codeFrame);\n        }, function (error) {\n          _this.updateStatus(type, error, null, null);\n        });\n      }\n    }\n  }, {\n    key: \"updateStatus\",\n    value: function updateStatus(type, error, stack, codeFrame) {\n      var lastStatus = this.symbolicated[type].status;\n      if (error != null) {\n        this.symbolicated[type] = {\n          error: error,\n          stack: null,\n          status: \"FAILED\"\n        };\n      } else if (stack != null) {\n        if (codeFrame) {\n          this.codeFrame = codeFrame;\n        }\n        this.symbolicated[type] = {\n          error: null,\n          stack: stack,\n          status: \"COMPLETE\"\n        };\n      } else {\n        this.symbolicated[type] = {\n          error: null,\n          stack: null,\n          status: \"PENDING\"\n        };\n      }\n      var status = this.symbolicated[type].status;\n      if (lastStatus !== status) {\n        if ([\"COMPLETE\", \"FAILED\"].includes(status)) {\n          this.flushCallbacks(type);\n        }\n      }\n    }\n  }]);\n  return LogBoxLog;\n}();\nexports.LogBoxLog = LogBoxLog;","map":{"version":3,"mappings":"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","names":["componentStackToStack","componentStack","map","stack","file","fileName","methodName","content","lineNumber","location","row","column","arguments","LogBoxLog","data","error","status","component","Map","level","type","message","category","codeFrame","isComponentError","count","symbolicated","getStack","callbacks","get","callback","clear","Set","set","add","_symbolicate","retry","pushCallback","flushCallbacks","LogBoxSymbolication","deleteStack","handleSymbolicate","componentStackCache","length","updateStatus","symbolicate","then","lastStatus","includes","exports"],"sources":["C:\\Users\\jimpe\\Desktop\\react_native_apps\\Portfolio2023\\node_modules\\@expo\\metro-runtime\\src\\error-overlay\\Data\\LogBoxLog.ts"],"sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as LogBoxSymbolication from \"./LogBoxSymbolication\";\nimport type { Stack } from \"./LogBoxSymbolication\";\nimport type {\n  Category,\n  Message,\n  ComponentStack,\n  CodeFrame,\n} from \"./parseLogBoxLog\";\n\ntype SymbolicationStatus = \"NONE\" | \"PENDING\" | \"COMPLETE\" | \"FAILED\";\n\nexport type LogLevel = \"warn\" | \"error\" | \"fatal\" | \"syntax\" | \"static\";\n\nexport type LogBoxLogData = {\n  level: LogLevel;\n  type?: string;\n  message: Message;\n  stack: Stack;\n  category: string;\n  componentStack: ComponentStack;\n  codeFrame?: CodeFrame;\n  isComponentError: boolean;\n};\n\nexport type StackType = \"stack\" | \"component\";\n\nfunction componentStackToStack(componentStack: ComponentStack): Stack {\n  return componentStack.map((stack) => ({\n    file: stack.fileName,\n    methodName: stack.content,\n    lineNumber: stack.location?.row ?? 0,\n    column: stack.location?.column ?? 0,\n    arguments: [],\n  }));\n}\n\ntype SymbolicationCallback = (status: SymbolicationStatus) => void;\n\ntype SymbolicationResult =\n  | { error: null; stack: null; status: \"NONE\" }\n  | { error: null; stack: null; status: \"PENDING\" }\n  | { error: null; stack: Stack; status: \"COMPLETE\" }\n  | { error: Error; stack: null; status: \"FAILED\" };\n\nexport class LogBoxLog {\n  message: Message;\n  type: string;\n  category: Category;\n  componentStack: ComponentStack;\n  stack: Stack;\n  count: number;\n  level: LogLevel;\n  codeFrame?: CodeFrame;\n  isComponentError: boolean;\n  symbolicated: Record<StackType, SymbolicationResult> = {\n    stack: {\n      error: null,\n      stack: null,\n      status: \"NONE\",\n    },\n    component: {\n      error: null,\n      stack: null,\n      status: \"NONE\",\n    },\n  };\n\n  private callbacks: Map<StackType, Set<SymbolicationCallback>> = new Map();\n\n  constructor(\n    data: LogBoxLogData & {\n      symbolicated?: Record<StackType, SymbolicationResult>;\n    }\n  ) {\n    this.level = data.level;\n    this.type = data.type ?? \"error\";\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n    this.symbolicated = data.symbolicated ?? this.symbolicated;\n  }\n\n  incrementCount(): void {\n    this.count += 1;\n  }\n\n  getAvailableStack(type: StackType): Stack | null {\n    if (this.symbolicated[type].status === \"COMPLETE\") {\n      return this.symbolicated[type].stack;\n    }\n    return this.getStack(type);\n  }\n\n  private flushCallbacks(type: StackType): void {\n    const callbacks = this.callbacks.get(type);\n    const status = this.symbolicated[type].status;\n    if (callbacks) {\n      for (const callback of callbacks) {\n        callback(status);\n      }\n      callbacks.clear();\n    }\n  }\n\n  private pushCallback(type: StackType, callback: SymbolicationCallback): void {\n    let callbacks = this.callbacks.get(type);\n    if (!callbacks) {\n      callbacks = new Set();\n      this.callbacks.set(type, callbacks);\n    }\n    callbacks.add(callback);\n  }\n\n  retrySymbolicate(\n    type: StackType,\n    callback?: (status: SymbolicationStatus) => void\n  ): void {\n    this._symbolicate(type, true, callback);\n  }\n\n  symbolicate(\n    type: StackType,\n    callback?: (status: SymbolicationStatus) => void\n  ): void {\n    this._symbolicate(type, false, callback);\n  }\n\n  private _symbolicate(\n    type: StackType,\n    retry: boolean,\n    callback?: (status: SymbolicationStatus) => void\n  ): void {\n    if (callback) {\n      this.pushCallback(type, callback);\n    }\n    const status = this.symbolicated[type].status;\n\n    if (status === \"COMPLETE\") {\n      return this.flushCallbacks(type);\n    }\n\n    if (retry) {\n      LogBoxSymbolication.deleteStack(this.getStack(type));\n      this.handleSymbolicate(type);\n    } else {\n      if (status === \"NONE\") {\n        this.handleSymbolicate(type);\n      }\n    }\n  }\n\n  private componentStackCache: Stack | null = null;\n\n  private getStack(type: StackType): Stack {\n    if (type === \"component\") {\n      if (this.componentStackCache == null) {\n        this.componentStackCache = componentStackToStack(this.componentStack);\n      }\n      return this.componentStackCache;\n    }\n    return this.stack;\n  }\n\n  private handleSymbolicate(type: StackType): void {\n    if (type === \"component\" && !this.componentStack?.length) {\n      return;\n    }\n\n    if (this.symbolicated[type].status !== \"PENDING\") {\n      this.updateStatus(type, null, null, null);\n      LogBoxSymbolication.symbolicate(this.getStack(type)).then(\n        (data) => {\n          this.updateStatus(type, null, data?.stack, data?.codeFrame);\n        },\n        (error) => {\n          this.updateStatus(type, error, null, null);\n        }\n      );\n    }\n  }\n\n  private updateStatus(\n    type: StackType,\n    error?: Error | null,\n    stack?: Stack | null,\n    codeFrame?: CodeFrame | null\n  ): void {\n    const lastStatus = this.symbolicated[type].status;\n    if (error != null) {\n      this.symbolicated[type] = {\n        error,\n        stack: null,\n        status: \"FAILED\",\n      };\n    } else if (stack != null) {\n      if (codeFrame) {\n        this.codeFrame = codeFrame;\n      }\n\n      this.symbolicated[type] = {\n        error: null,\n        stack,\n        status: \"COMPLETE\",\n      };\n    } else {\n      this.symbolicated[type] = {\n        error: null,\n        stack: null,\n        status: \"PENDING\",\n      };\n    }\n\n    const status = this.symbolicated[type].status;\n    if (lastStatus !== status) {\n      if ([\"COMPLETE\", \"FAILED\"].includes(status)) {\n        this.flushCallbacks(type);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}