{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { useNavigationContainerRef } from \"@react-navigation/native\";\nimport { useSyncExternalStore, useMemo, Fragment } from \"react\";\nimport { getRouteInfoFromState } from \"../LocationProvider\";\nimport { getPathDataFromState } from \"../fork/getPathFromState\";\nimport { getLinkingConfig } from \"../getLinkingConfig\";\nimport { getRoutes } from \"../getRoutes\";\nimport { getQualifiedRouteComponent } from \"../useScreens\";\nimport { _internal_maybeHideAsync } from \"../views/Splash\";\nimport { goBack, linkTo, push, replace, setParams } from \"./routing\";\nimport { getSortedRoutes } from \"./sort-routes\";\nexport var RouterStore = function () {\n  function RouterStore() {\n    var _this = this;\n    _classCallCheck(this, RouterStore);\n    this.isReady = false;\n    this.rootStateSubscribers = new Set();\n    this.storeSubscribers = new Set();\n    this.linkTo = linkTo.bind(this);\n    this.getSortedRoutes = getSortedRoutes.bind(this);\n    this.goBack = goBack.bind(this);\n    this.push = push.bind(this);\n    this.replace = replace.bind(this);\n    this.setParams = setParams.bind(this);\n    this.onReady = function () {\n      if (!_this.isReady) {\n        requestAnimationFrame(function () {\n          return _internal_maybeHideAsync();\n        });\n      }\n      _this.isReady = true;\n    };\n    this.subscribeToRootState = function (subscriber) {\n      _this.rootStateSubscribers.add(subscriber);\n      return function () {\n        return _this.rootStateSubscribers.delete(subscriber);\n      };\n    };\n    this.subscribeToStore = function (subscriber) {\n      _this.storeSubscribers.add(subscriber);\n      return function () {\n        return _this.storeSubscribers.delete(subscriber);\n      };\n    };\n    this.snapshot = function () {\n      return _this;\n    };\n    this.rootStateSnapshot = function () {\n      return _this.rootState;\n    };\n    this.routeInfoSnapshot = function () {\n      return _this.routeInfo;\n    };\n  }\n  _createClass(RouterStore, [{\n    key: \"initialize\",\n    value: function initialize(context, navigationRef, initialLocation) {\n      var _this$navigationRefSu,\n        _this2 = this;\n      this.isReady ||= Boolean(initialLocation);\n      this.initialState = undefined;\n      this.rootState = undefined;\n      this.routeInfo = undefined;\n      this.linking = undefined;\n      (_this$navigationRefSu = this.navigationRefSubscription) == null ? void 0 : _this$navigationRefSu.call(this);\n      this.rootStateSubscribers.clear();\n      this.storeSubscribers.clear();\n      this.routeNode = getRoutes(context);\n      this.rootComponent = this.routeNode ? getQualifiedRouteComponent(this.routeNode) : Fragment;\n      if (!this.routeNode && process.env.NODE_ENV === \"production\") {\n        throw new Error(\"No routes found\");\n      }\n      this.navigationRef = navigationRef;\n      if (this.routeNode) {\n        this.linking = getLinkingConfig(this.routeNode);\n        if (initialLocation) {\n          var _this$linking$getStat, _this$linking;\n          this.initialState = (_this$linking$getStat = (_this$linking = this.linking).getStateFromPath) == null ? void 0 : _this$linking$getStat.call(_this$linking, initialLocation.pathname + initialLocation.search, this.linking.config);\n        }\n      }\n      if (this.initialState) {\n        this.rootState = this.initialState;\n        this.routeInfo = this.getRouteInfo(this.initialState);\n      } else {\n        this.routeInfo = {\n          unstable_globalHref: \"\",\n          pathname: \"\",\n          params: {},\n          segments: []\n        };\n      }\n      this.navigationRefSubscription = navigationRef.addListener(\"state\", function (data) {\n        var state = data.data.state;\n        if (navigationRef.isReady()) {\n          _this2.onReady();\n        }\n        if (state && state !== _this2.rootState) {\n          _this2.rootState = state;\n          _this2.routeInfo = _this2.getRouteInfo(state);\n          for (var subscriber of _this2.rootStateSubscribers) {\n            subscriber();\n          }\n        }\n      });\n      for (var subscriber of this.storeSubscribers) {\n        subscriber();\n      }\n    }\n  }, {\n    key: \"getRouteInfo\",\n    value: function getRouteInfo(state) {\n      var _this3 = this;\n      return getRouteInfoFromState(function (state, asPath) {\n        var _this3$linking;\n        return getPathDataFromState(state, _objectSpread(_objectSpread({\n          screens: []\n        }, (_this3$linking = _this3.linking) == null ? void 0 : _this3$linking.config), {}, {\n          preserveDynamicRoutes: asPath,\n          preserveGroups: asPath\n        }));\n      }, state);\n    }\n  }, {\n    key: \"shouldShowTutorial\",\n    value: function shouldShowTutorial() {\n      return !this.routeNode && process.env.NODE_ENV === \"development\";\n    }\n  }]);\n  return RouterStore;\n}();\nexport var store = new RouterStore();\nexport function useExpoRouter() {\n  return useSyncExternalStore(store.subscribeToStore, store.snapshot, store.snapshot);\n}\nexport function useStoreRootState() {\n  return useSyncExternalStore(store.subscribeToRootState, store.rootStateSnapshot, store.rootStateSnapshot);\n}\nexport function useStoreRouteInfo() {\n  return useSyncExternalStore(store.subscribeToRootState, store.routeInfoSnapshot, store.routeInfoSnapshot);\n}\nexport function useInitializeExpoRouter(context, initialLocation) {\n  var navigationRef = useNavigationContainerRef();\n  useMemo(function () {\n    return store.initialize(context, navigationRef, initialLocation);\n  }, [context, initialLocation]);\n  useExpoRouter();\n  return store;\n}","map":{"version":3,"names":["useNavigationContainerRef","useSyncExternalStore","useMemo","Fragment","getRouteInfoFromState","getPathDataFromState","getLinkingConfig","getRoutes","getQualifiedRouteComponent","_internal_maybeHideAsync","goBack","linkTo","push","replace","setParams","getSortedRoutes","RouterStore","isReady","rootStateSubscribers","Set","storeSubscribers","bind","onReady","requestAnimationFrame","subscribeToRootState","subscriber","add","delete","subscribeToStore","snapshot","rootStateSnapshot","rootState","routeInfoSnapshot","routeInfo","context","navigationRef","initialLocation","Boolean","initialState","undefined","linking","navigationRefSubscription","clear","routeNode","rootComponent","process","env","NODE_ENV","Error","getStateFromPath","pathname","search","config","getRouteInfo","unstable_globalHref","params","segments","addListener","data","state","asPath","screens","preserveDynamicRoutes","preserveGroups","store","useExpoRouter","useStoreRootState","useStoreRouteInfo","useInitializeExpoRouter","initialize"],"sources":["C:/Users/jimpe/Desktop/react_native_apps/Portfolio2023/node_modules/expo-router/src/global-state/router-store.ts"],"sourcesContent":["import {\n  NavigationContainerRefWithCurrent,\n  getPathFromState,\n  useNavigationContainerRef,\n} from \"@react-navigation/native\";\nimport { useSyncExternalStore, useMemo, ComponentType, Fragment } from \"react\";\n\nimport { UrlObject, getRouteInfoFromState } from \"../LocationProvider\";\nimport { RouteNode } from \"../Route\";\nimport { getPathDataFromState } from \"../fork/getPathFromState\";\nimport { ResultState } from \"../fork/getStateFromPath\";\nimport { ExpoLinkingOptions, getLinkingConfig } from \"../getLinkingConfig\";\nimport { getRoutes } from \"../getRoutes\";\nimport { RequireContext } from \"../types\";\nimport { getQualifiedRouteComponent } from \"../useScreens\";\nimport { _internal_maybeHideAsync } from \"../views/Splash\";\nimport { goBack, linkTo, push, replace, setParams } from \"./routing\";\nimport { getSortedRoutes } from \"./sort-routes\";\n\n/**\n * This is the global state for the router. It is used to keep track of the current route, and to provide a way to navigate to other routes.\n *\n * There should only be one instance of this class and be initialized via `useInitializeExpoRouter`\n */\nexport class RouterStore {\n  routeNode!: RouteNode | null;\n  rootComponent!: ComponentType;\n  linking: ExpoLinkingOptions | undefined;\n  isReady: boolean = false;\n\n  initialState: ResultState | undefined;\n  rootState: ResultState | undefined;\n  routeInfo?: UrlObject | undefined;\n\n  navigationRef!: NavigationContainerRefWithCurrent<ReactNavigation.RootParamList>;\n  navigationRefSubscription!: () => void;\n\n  rootStateSubscribers = new Set<() => void>();\n  storeSubscribers = new Set<() => void>();\n\n  linkTo = linkTo.bind(this);\n  getSortedRoutes = getSortedRoutes.bind(this);\n  goBack = goBack.bind(this);\n  push = push.bind(this);\n  replace = replace.bind(this);\n  setParams = setParams.bind(this);\n\n  initialize(\n    context: RequireContext,\n    navigationRef: NavigationContainerRefWithCurrent<ReactNavigation.RootParamList>,\n    initialLocation?: URL\n  ) {\n    // Clean up any previous state\n    this.isReady ||= Boolean(initialLocation);\n    this.initialState = undefined;\n    this.rootState = undefined;\n    this.routeInfo = undefined;\n    this.linking = undefined;\n    this.navigationRefSubscription?.();\n    this.rootStateSubscribers.clear();\n    this.storeSubscribers.clear();\n\n    this.routeNode = getRoutes(context);\n    this.rootComponent = this.routeNode\n      ? getQualifiedRouteComponent(this.routeNode)\n      : Fragment;\n\n    // Only error in production, in development we will show the onboarding screen\n    if (!this.routeNode && process.env.NODE_ENV === \"production\") {\n      throw new Error(\"No routes found\");\n    }\n\n    this.navigationRef = navigationRef;\n\n    if (this.routeNode) {\n      this.linking = getLinkingConfig(this.routeNode!);\n\n      if (initialLocation) {\n        this.initialState = this.linking.getStateFromPath?.(\n          initialLocation.pathname + initialLocation.search,\n          this.linking.config\n        );\n      }\n    }\n\n    // There is no routeNode, so we will be showing the onboarding screen\n    // In the meantime, just mock the routeInfo\n    if (this.initialState) {\n      this.rootState = this.initialState;\n      this.routeInfo = this.getRouteInfo(this.initialState);\n    } else {\n      this.routeInfo = {\n        unstable_globalHref: \"\",\n        pathname: \"\",\n        params: {},\n        segments: [],\n      };\n    }\n\n    this.navigationRefSubscription = navigationRef.addListener(\n      \"state\",\n      (data) => {\n        const state = data.data.state as ResultState;\n\n        if (navigationRef.isReady()) {\n          this.onReady();\n        }\n\n        // This can sometimes be undefined when an error is thrown in the Root Layout Route.\n        if (state && state !== this.rootState) {\n          this.rootState = state;\n          this.routeInfo = this.getRouteInfo(state);\n\n          for (const subscriber of this.rootStateSubscribers) {\n            subscriber();\n          }\n        }\n      }\n    );\n\n    for (const subscriber of this.storeSubscribers) {\n      subscriber();\n    }\n  }\n\n  getRouteInfo(state: ResultState) {\n    return getRouteInfoFromState(\n      (state: Parameters<typeof getPathFromState>[0], asPath: boolean) => {\n        return getPathDataFromState(state, {\n          screens: [],\n          ...this.linking?.config,\n          preserveDynamicRoutes: asPath,\n          preserveGroups: asPath,\n        });\n      },\n      state\n    );\n  }\n\n  // This is only used in development, to show the onboarding screen\n  // In production we should have errored during the initialization\n  shouldShowTutorial() {\n    return !this.routeNode && process.env.NODE_ENV === \"development\";\n  }\n\n  /** Make sure these are arrow functions so `this` is correctly bound */\n  onReady = () => {\n    if (!this.isReady) {\n      requestAnimationFrame(() => _internal_maybeHideAsync());\n    }\n    this.isReady = true;\n  };\n  subscribeToRootState = (subscriber: () => void) => {\n    this.rootStateSubscribers.add(subscriber);\n    return () => this.rootStateSubscribers.delete(subscriber);\n  };\n  subscribeToStore = (subscriber: () => void) => {\n    this.storeSubscribers.add(subscriber);\n    return () => this.storeSubscribers.delete(subscriber);\n  };\n  snapshot = () => {\n    return this;\n  };\n  rootStateSnapshot = () => {\n    return this.rootState!;\n  };\n  routeInfoSnapshot = () => {\n    return this.routeInfo!;\n  };\n}\n\nexport const store = new RouterStore();\n\nexport function useExpoRouter() {\n  return useSyncExternalStore(\n    store.subscribeToStore,\n    store.snapshot,\n    store.snapshot\n  );\n}\n\nexport function useStoreRootState() {\n  return useSyncExternalStore(\n    store.subscribeToRootState,\n    store.rootStateSnapshot,\n    store.rootStateSnapshot\n  );\n}\n\nexport function useStoreRouteInfo() {\n  return useSyncExternalStore(\n    store.subscribeToRootState,\n    store.routeInfoSnapshot,\n    store.routeInfoSnapshot\n  );\n}\n\nexport function useInitializeExpoRouter(\n  context: RequireContext,\n  initialLocation: URL | undefined\n) {\n  const navigationRef = useNavigationContainerRef();\n  useMemo(\n    () => store.initialize(context, navigationRef, initialLocation),\n    [context, initialLocation]\n  );\n  useExpoRouter();\n  return store;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}