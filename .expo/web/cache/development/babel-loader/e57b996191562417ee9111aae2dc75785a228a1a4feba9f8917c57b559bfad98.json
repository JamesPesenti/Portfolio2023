{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadBundleAsync = void 0;\nvar HMRClient_1 = __importDefault(require(\"../HMRClient\"));\nvar LoadingView_1 = __importDefault(require(\"../LoadingView\"));\nvar buildUrlForBundle_1 = require(\"./buildUrlForBundle\");\nvar fetchThenEval_1 = require(\"./fetchThenEval\");\nvar pendingRequests = 0;\nfunction loadBundleAsync(bundlePath) {\n  var requestUrl = (0, buildUrlForBundle_1.buildUrlForBundle)(bundlePath);\n  LoadingView_1.default.showMessage(\"Downloading...\", \"load\");\n  pendingRequests++;\n  return (0, fetchThenEval_1.fetchThenEvalAsync)(requestUrl).then(function () {\n    HMRClient_1.default.registerBundle(requestUrl);\n  }).finally(function () {\n    if (! --pendingRequests) {\n      LoadingView_1.default.hide();\n    }\n  });\n}\nexports.loadBundleAsync = loadBundleAsync;","map":{"version":3,"mappings":";;;;;;;;;;;AAMA;AACA;AACA;AACA;AAEA,IAAIA,eAAe,GAAG,CAAC;AAOvB,SAAgBC,eAAe,CAACC,UAAkB;EAChD,IAAMC,UAAU,GAAG,yCAAiB,EAACD,UAAU,CAAC;EAGhDE,qBAAW,CAACC,WAAW,CAAC,gBAAgB,EAAE,MAAM,CAAC;EACjDL,eAAe,EAAE;EAEjB,OAAO,sCAAkB,EAACG,UAAU,CAAC,CAClCG,IAAI,CAAC,YAAK;IACTC,mBAAS,CAACC,cAAc,CAACL,UAAU,CAAC;EACtC,CAAC,CAAC,CACDM,OAAO,CAAC,YAAK;IACZ,IAAI,CAAC,GAAET,eAAe,EAAE;MACtBI,qBAAW,CAACM,IAAI,EAAE;;EAEtB,CAAC,CAAC;AACN;AAhBAC","names":["pendingRequests","loadBundleAsync","bundlePath","requestUrl","LoadingView_1","showMessage","then","HMRClient_1","registerBundle","finally","hide","exports"],"sources":["C:\\Users\\jimpe\\Desktop\\react_native_apps\\Portfolio2023\\node_modules\\@expo\\metro-runtime\\src\\async-require\\loadBundle.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport HMRClient from \"../HMRClient\";\nimport LoadingView from \"../LoadingView\";\nimport { buildUrlForBundle } from \"./buildUrlForBundle\";\nimport { fetchThenEvalAsync } from \"./fetchThenEval\";\n\nlet pendingRequests = 0;\n\n/**\n * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n *\n * @param bundlePath Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon.bundle?params=from-metro`.\n */\nexport function loadBundleAsync(bundlePath: string): Promise<void> {\n  const requestUrl = buildUrlForBundle(bundlePath);\n\n  // Send a signal to the `expo` package to show the loading indicator.\n  LoadingView.showMessage(\"Downloading...\", \"load\");\n  pendingRequests++;\n\n  return fetchThenEvalAsync(requestUrl)\n    .then(() => {\n      HMRClient.registerBundle(requestUrl);\n    })\n    .finally(() => {\n      if (!--pendingRequests) {\n        LoadingView.hide();\n      }\n    });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}